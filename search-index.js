var searchIndex = JSON.parse('{\
"zookeeper":{"doc":"","t":"SSNDENNNNNNNNSNNNNNNNNNNESNNNNNNNNNNNENSNNNNNNNNNNNNNNDNNNNNNNNSNNNNDDNNNSDDEIEEEGEDILLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMLKLLLKLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLKLMLLLLLLLLLLLLLLLLMMMLMLMMMLMLALLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMAAANGNNNNNGNDELLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLLLLLDLLLLLLLLLLLL","n":["ADMIN","ALL","APIError","Acl","AddWatchMode","Any","Any","Associating","AuthFailed","AuthFailed","AuthFailed","BadArguments","BadVersion","CREATE","ChildWatchRemoved","Children","Children","Closed","Connected","ConnectedReadOnly","ConnectedReadOnly","Connecting","ConnectionLoss","Container","CreateMode","DELETE","Data","Data","DataInconsistency","DataWatchRemoved","Disconnected","Ephemeral","EphemeralOnLocalSession","EphemeralSequential","Expired","InvalidACL","InvalidCallback","KeeperState","MarshallingError","NONE","NoAuth","NoChildrenForEphemerals","NoNode","NoWatcher","NodeChildrenChanged","NodeCreated","NodeDataChanged","NodeDeleted","NodeExists","None","NotConnected","NotEmpty","NotReadOnly","OperationTimeout","Permission","Persistent","Persistent","Persistent","Persistent","PersistentRecursive","PersistentRecursive","PersistentRecursive","PersistentSequential","READ","RuntimeInconsistency","SaslAuthenticated","SessionExpired","SessionMoved","Stat","Subscription","SyncConnected","SystemError","Unimplemented","WRITE","Watch","WatchedEvent","WatchedEventType","Watcher","WatcherType","WatcherType","ZkError","ZkResult","ZkState","ZooKeeper","ZooKeeperExt","add_auth","add_listener","add_watch","aversion","bitand","bitor","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","can","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close","connect","create","creator_all","ctime","cversion","czxid","data_length","delete","delete_recursive","delete_recursive","description","drop","ensure_path","ensure_path","ephemeral_owner","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","event_type","exists","exists_w","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_acl","get_children","get_children_recursive","get_children_recursive","get_children_w","get_data","get_data_w","handle","hash","id","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_ephemeral","is_persistent","keeper_state","mtime","mzxid","new","num_children","open_unsafe","path","path","perms","provide","pzxid","read_unsafe","recipes","remove_listener","remove_watches","scheme","set_acl","set_data","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","version","watcher","watcher_type","cache","leader","queue","ChildAdded","ChildData","ChildRemoved","ChildUpdated","ConnectionLost","ConnectionReconnected","ConnectionSuspended","Data","Initialized","PathChildrenCache","PathChildrenCacheEvent","add_listener","borrow","borrow","borrow_mut","borrow_mut","clear","clone","clone_into","fmt","from","from","get_current_data","into","into","new","remove_listener","start","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","LeaderLatch","borrow","borrow_mut","clone","clone_into","from","has_leadership","id","into","new","path","start","stop","to_owned","try_from","try_into","type_id","ZkQueue","borrow","borrow_mut","from","into","new","offer","peek","poll","take","try_from","try_into","type_id"],"q":[[0,"zookeeper"],[311,"zookeeper::recipes"],[314,"zookeeper::recipes::cache"],[349,"zookeeper::recipes::leader"],[366,"zookeeper::recipes::queue"]],"d":["You can alter permissions on this node.","You can do anything.","This code is never returned from the server. It should not …","An access control list.","The mode of watch.","","","Previously used to represent a state between connection …","Client authentication failed.","Authentication has failed – connection requires a new …","Authentication has failed. Operations will return …","Invalid arguments.","Version conflict in <code>set</code> operation. In case of …","You can create a child node.","Issued when the client removes a child watcher.","","","The session has ended. Operations will return …","Session has been fully established. Operations will …","The client is connected to a read-only server, that is the …","Connected to a read-only server. See …","Currently attempting to connect with an ensemble member. …","Connection to the server has been lost.","Container nodes are special purpose nodes useful for …","CreateMode value determines how the znode is created on …","You can delete a child node (but not necessarily this one).","","","A data inconsistency was found.","Issued when the client removes a data watcher.","The client is in the disconnected state - it is not …","The znode will be deleted upon the client’s disconnect.","Attempt to create ephemeral node on a local session.","The znode will be deleted upon the client’s disconnect, …","The serving cluster has expired this session. The …","Invalid <code>Acl</code> specified.","Invalid callback specified.","Enumeration of states the client may be at a Watcher …","Error while marshalling or unmarshalling data.","No permissions are set (server could have been configured …","Not authenticated.","Ephemeral nodes may not have children.","Attempted to read a node that does not exist.","Attempt to remove a non-existing watcher.","Issued when the children of a watched znode are created or …","Issued when a znode at a given path is created.","Issued when the data of a watched znode are altered. This …","Issued when a znode at a given path is deleted.","Request to create node that already exists.","Nothing known has occurred on the znode. This value is …","Theoretically used as a special state to represent …","The node has children.","State-changing request is passed to read-only server.","Operation timeout.","Describes the ability of a user to perform a certain …","The znode will not be automatically deleted upon client’…","Set a watcher on the given path that does not get removed …","","","Like a Persistent watcher but applies not only to the …","","","The name of the znode will be appended with a …","You can access the data of a node and can list its …","A runtime inconsistency was found.","Used to notify clients that they are SASL-authenticated, …","The session has been expired by the server.","Session moved to another server, so operation is ignored.","Statistics about a znode, similar to the UNIX <code>stat</code> …","A unique identifier returned by <code>ZooKeeper::add_listener</code>.","The client is in the connected state - it is connected to …","System and server-side errors. This is never thrown by the …","Operation is unimplemented.","You can set the data of a node.","An object watching a path for certain changes.","Represents a change on the ZooKeeper that a <code>Watcher</code> is …","Enumeration of types of events that may occur on the znode.","The interface for handling events when a <code>Watch</code> triggers.","The type of watcher.","The type of watcher.","Basic type for errors returned from the server.","Value returned from potentially-error operations.","Enumeration of states the client may be at any time.","The client interface for interacting with a ZooKeeper …","Extended ZooKeeper operations that are not needed for the …","Add the specified <code>scheme</code>:<code>auth</code> information to this …","Adds a state change <code>Listener</code>, which will be notified of …","Add a watch to the given znode using the given mode. Note: …","The number of changes to the ACL of the znode.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check that all <code>permissions</code> are set.","","","","","","","","","","","","","","","","","","","","","","","Close this client object. Once the client is closed, its …","Connect to a ZooKeeper cluster.","Create a node with the given <code>path</code>. The node data will be …","This ACL gives the creators authentication id’s all …","Milliseconds since epoch when the znode was created.","The number of changes to the children of the znode.","The transaction ID that created the znode.","The length of the data field of the znode.","Delete the node with the given <code>path</code>. The call will succeed …","Deletes the node at <code>path</code> and all its children. <em>NOTE</em>: This …","","","","Ensure that <code>path</code> exists and create all potential paths …","","The session ID of the owner of this znode, if it is an …","","","","","","","","","","","","","The trigger that caused the watch to hit.","Return the <code>Stat</code> of the node of the given <code>path</code> or <code>None</code> if …","Return the <code>Stat</code> of the node of the given <code>path</code> or <code>None</code> if …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Return the ACL and <code>Stat</code> of the node of the given path.","Return the list of the children of the node of the given …","Performs a breadth-first tree traversal of the tree …","","Return the list of the children of the node of the given …","Return the data and the <code>Stat</code> of the node of the given path.","Return the data and the <code>Stat</code> of the node of the given path.","Receive the triggered event.","","The ID of the user under the <code>scheme</code>. For example, with the …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is the znode an ephemeral entry?","","The current state of ZooKeeper (and the client’s …","Milliseconds since epoch when the znode was last modified.","The last transaction that modified the znode.","Create a new ACL with the given <code>permissions</code>, <code>scheme</code>, and <code>id</code>…","The number of children this znode has.","This is a completely open ACL.","The path to the znode this is watching.","The path of the znode that was involved. This will be <code>None</code> …","The permissions associated with this ACL.","","The transaction ID that last modified the children of the …","This ACL gives the world the ability to read.","Extended ZooKeeper recipes from Apache Curator.","Removes a state change <code>Listener</code> and closes the channel.","Remove watches of a given type for a path.","The authentication scheme this list is used for. The most …","Set the ACL for the node of the given path if such a node …","Set the data for the node of the given <code>path</code> if such a node …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of changes to the data of the znode.","The handler for this watch, to call when it is triggered.","The type of changes this watch is looking for.","Caching mechanisms.","","","","Data contents of a znode and associated <code>Stat</code>.","","","","","","Data for all known children of a znode.","","A Path Cache is used to watch a znode.","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Return the current data. There are no guarantees of …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new cache instance watching <code>path</code>. If <code>path</code> does …","","Start the cache. The cache is not started automatically. …","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Inserts data into the queue","Returns the data at the first element of the queue, or …","Attempts to remove the head of the queue and return it. …","Removes the head of the queue and returns it, blocking …","","",""],"i":[12,12,15,0,0,19,19,20,15,17,20,15,15,12,18,19,19,20,20,17,20,20,15,16,0,12,19,19,15,18,17,16,15,16,17,15,15,0,15,12,15,15,15,15,18,18,18,18,15,18,20,15,15,15,0,16,10,19,19,10,19,19,16,12,15,17,15,15,0,0,17,15,15,12,0,0,0,0,0,0,0,0,0,0,0,1,1,1,26,12,12,39,1,12,14,15,16,17,18,10,19,20,26,8,21,39,1,12,14,15,16,17,18,10,19,20,26,8,21,12,12,14,15,16,17,18,10,19,20,8,21,12,14,15,16,17,18,10,19,20,8,21,1,1,1,14,26,26,26,26,1,40,1,15,1,40,1,26,12,14,15,16,17,18,19,20,8,18,19,8,21,1,1,12,12,14,14,15,15,16,17,18,10,19,20,26,8,21,39,1,12,14,15,15,16,17,17,18,18,10,10,19,19,19,20,26,8,21,1,1,40,1,1,1,1,11,8,14,39,1,12,14,15,16,17,18,10,19,20,26,8,21,26,19,21,26,26,14,26,14,39,21,14,15,26,14,0,1,1,14,1,1,12,14,15,16,17,18,10,19,20,8,21,12,14,15,39,1,12,14,15,16,17,18,10,19,20,26,8,21,39,1,12,14,15,16,17,18,10,19,20,26,8,21,39,1,12,14,15,16,17,18,10,19,20,26,8,21,26,39,39,0,0,0,34,0,34,34,34,34,34,0,34,0,0,33,33,34,33,34,33,34,34,34,33,34,33,33,34,33,33,33,34,33,34,33,34,33,34,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,38,38,38,38,38,38,38,38,38,38,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2,[4,[3]]],5],[[1,[0,[6,7]]],8],[[1,9,10,11],5],0,[[12,12],12],[[12,12],12],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[12,12],13],[12,12],[14,14],[15,15],[16,16],[17,17],[18,18],[10,10],[19,19],[20,20],[8,8],[21,21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,5],[[9,22,11],[[5,[1]]]],[[1,9,[4,[3]],[4,[14]],16],[[5,[23]]]],[[],[[4,[14]]]],0,0,0,0,[[1,9,[25,[24]]],5],[9,5],[[1,9],5],[15,9],[1],[9,5],[[1,9],5],0,[[12,12],13],[[14,14],13],[[15,15],13],[[16,16],13],[[17,17],13],[[18,18],13],[[19,19],13],[[20,20],13],[[8,8],13],[[],13],[[],13],[[],13],0,[[1,9,13],[[5,[[25,[26]]]]]],[[1,9,11],[[5,[[25,[26]]]]]],[[12,27],28],[[12,27],28],[[14,27],28],[[14,27],28],[[15,27],28],[[15,27],28],[[16,27],28],[[17,27],28],[[18,27],28],[[10,27],28],[[19,27],28],[[20,27],28],[[26,27],28],[[8,27],28],[[21,27],28],[[]],[[]],[[]],[[]],[24,15],[[]],[[]],[24,17],[[]],[24,18],[[]],[[]],[24,10],[[]],[10,19],[24,19],[[]],[[]],[[]],[[]],[[1,9],5],[[1,9,13],[[5,[[4,[23]]]]]],[9,[[5,[[4,[23]]]]]],[[1,9],[[5,[[4,[23]]]]]],[[1,9,11],[[5,[[4,[23]]]]]],[[1,9,13],5],[[1,9,11],5],[21],[[8,29]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[26,13],[19,13],0,0,0,[[12,2,2],14],0,[[],[[4,[14]]]],0,0,0,[30],0,[[],[[4,[14]]]],0,[[1,8]],[[1,9,19],5],0,[[1,9,[4,[14]],[25,[24]]],[[5,[26]]]],[[1,9,[4,[3]],[25,[24]]],[[5,[26]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],[[],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[33,[0,[6,7]]],8],[[]],[[]],[[]],[[]],[33],[34,34],[[]],[[34,27],28],[[]],[[]],[33,35],[[]],[[]],[[[36,[1]],9],[[5,[33]]]],[[33,8]],[33,5],[[]],[[],31],[[],31],[[],31],[[],31],[[],32],[[],32],0,[[]],[[]],[37,37],[[]],[[]],[37,13],[37,9],[[]],[[[36,[1]],23,23],37],[37,[[25,[23]]]],[37,5],[37,5],[[]],[[],31],[[],31],[[],32],0,[[]],[[]],[[]],[[]],[[[36,[1]],23],[[5,[38]]]],[[38,[4,[3]]],[[5,[23]]]],[38,[[5,[[25,[[4,[3]]]]]]]],[38,[[5,[[25,[[4,[3]]]]]]]],[38,[[5,[[4,[3]]]]]],[[],31],[[],31],[[],32]],"c":[7,50],"p":[[3,"ZooKeeper"],[8,"ToString"],[15,"u8"],[3,"Vec"],[6,"ZkResult"],[8,"Fn"],[8,"Send"],[3,"Subscription"],[15,"str"],[4,"AddWatchMode"],[8,"Watcher"],[3,"Permission"],[15,"bool"],[3,"Acl"],[4,"ZkError"],[4,"CreateMode"],[4,"KeeperState"],[4,"WatchedEventType"],[4,"WatcherType"],[4,"ZkState"],[3,"WatchedEvent"],[3,"Duration"],[3,"String"],[15,"i32"],[4,"Option"],[3,"Stat"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[3,"Demand"],[4,"Result"],[3,"TypeId"],[3,"PathChildrenCache"],[4,"PathChildrenCacheEvent"],[6,"Data"],[3,"Arc"],[3,"LeaderLatch"],[3,"ZkQueue"],[3,"Watch"],[8,"ZooKeeperExt"]]},\
"zookeeper_derive":{"doc":"","t":"YYY","n":["EnumConvertFromInt","EnumDisplay","EnumError"],"q":[[0,"zookeeper_derive"]],"d":["Emit an <code>std::convert::From&lt;i32&gt;</code> implementation for an enum …","Emit an <code>std::fmt::Display</code> implementation for an enum type.","Emit an <code>std::error::Error</code> implementation for an enum type. …"],"i":[0,0,0],"f":[0,0,0],"c":[],"p":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
